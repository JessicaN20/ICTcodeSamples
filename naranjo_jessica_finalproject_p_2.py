# -*- coding: utf-8 -*-
"""Naranjo_Jessica_FinalProject_p#2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12mYGErBW3kWMuSQfS7p6fxJvEXUac7og
"""

from google.colab import drive
drive.mount("/content/drive")

import pandas as pd

df = pd.read_csv('/content/drive/My Drive/FinalProject/english-spanish-dataset.csv')

df.head()

import random
import pandas as pd
import seaborn as sb
import numpy as np
from sklearn.metrics import confusion_matrix
from  sklearn.model_selection import train_test_split

import numpy as np
from keras.models import Sequential
from keras.layers import Dense, Dropout, Conv2D, MaxPool2D, Flatten
from keras.utils import np_utils
from tensorflow.keras.utils import to_categorical

import matplotlib
import matplotlib.pyplot as plt

import os

import pandas as pd
def load_data(path):
    """
    Load dataset
    """
    input_file = os.path.join(path)
    with open(input_file, "r") as f:
        data = f.read()

    return data.split('\n')

english_sentences = load_data('/content/drive/My Drive/FinalProject/english-spanish-dataset.csv')

print('Spanish to English dataset Loaded')
eng_spanish_data_frame=pd.read_csv('/content/drive/My Drive/FinalProject/english-spanish-dataset.csv',index_col=False)
del eng_spanish_data_frame['Unnamed: 0']

eng_spanish_data_frame=eng_spanish_data_frame.head(50000)
eng_spanish_data_frame=pd.concat([eng_spanish_data_frame,  
                                  pd.DataFrame([['this german hotel belongs to the company',
                                                 'este hotel alem√°n pertenece a la empresa']],
                                               columns=["english", "spanish"])], axis=0)

eng_spanish_data_frame

english_sentences=eng_spanish_data_frame['english']
spanish_sentences=eng_spanish_data_frame['spanish']
for sample_i in range(5):
    print('English sample {}:  {}'.format(sample_i + 1, english_sentences[sample_i]))
    print('Spanish sample {}:  {}\n'.format(sample_i + 1, spanish_sentences[sample_i]))

import collections
english_words_counter = collections.Counter([word for sentence in english_sentences for word in sentence.split()])
spanish_words_counter = collections.Counter([word for sentence in spanish_sentences for word in sentence.split()])

print('{} English words.'.format(len([word for sentence in english_sentences for word in sentence.split()])))
print('{} unique English words.'.format(len(english_words_counter)))
print('10 Most common words in the English dataset:')
print('"' + '" "'.join(list(zip(*english_words_counter.most_common(10)))[0]) + '"')
print()
print('{} French words.'.format(len([word for sentence in spanish_sentences for word in sentence.split()])))
print('{} unique French words.'.format(len(spanish_words_counter)))
print('10 Most common words in the French dataset:')
print('"' + '" "'.join(list(zip(*spanish_words_counter.most_common(10)))[0]) + '"')

from keras.preprocessing.text import Tokenizer
from keras_preprocessing.sequence import pad_sequences
from keras.models import Model, Sequential
from keras.layers import GRU, Input, Dense, TimeDistributed, Activation, RepeatVector, Bidirectional, Dropout, LSTM
from tensorflow.keras.layers import Embedding
from keras.optimizers import Adam
from keras.losses import sparse_categorical_crossentropy



def pad(x, length=None):
    """
    Pad x
    :param x: List of sequences.
    :param length: Length to pad the sequence to.  If None, use length of longest sequence in x.
    :return: Padded numpy array of sequences
    """
    # TODO: Implement
    return pad_sequences(x, maxlen=length, padding='post')

def tokenize(x):
    """
    Tokenize x
    :param x: List of sentences/strings to be tokenized
    :return: Tuple of (tokenized x data, tokenizer used to tokenize x)
    """
    # TODO: Implement
    tokenizer = Tokenizer()
    tokenizer.fit_on_texts(x)
    return tokenizer.texts_to_sequences(x), tokenizer


def preprocess(x, y):
    """
    Preprocess x and y
    :param x: Feature List of sentences
    :param y: Label List of sentences
    :return: Tuple of (Preprocessed x, Preprocessed y, x tokenizer, y tokenizer)
    """
    preprocess_x, x_tk = tokenize(x)
    preprocess_y, y_tk = tokenize(y)

    preprocess_x = pad(preprocess_x)
    preprocess_y = pad(preprocess_y)

    # Keras's sparse_categorical_crossentropy function requires the labels to be in 3 dimensions
    preprocess_y = preprocess_y.reshape(*preprocess_y.shape, 1)

    return preprocess_x, preprocess_y, x_tk, y_tk

preproc_english_sentences, preproc_spanish_sentences, english_tokenizer, french_tokenizer =\
    preprocess(english_sentences, spanish_sentences)
    
max_english_sequence_length = preproc_english_sentences.shape[1]
max_spanish_sequence_length = preproc_spanish_sentences.shape[1]
english_vocab_size = len(english_tokenizer.word_index)
spanish_vocab_size = len(french_tokenizer.word_index)

print('Data Preprocessed')
print("Max English sentence length:", max_english_sequence_length)
print("Max Spanish sentence length:", max_spanish_sequence_length)
print("English vocabulary size:", english_vocab_size)
print("Spanish vocabulary size:", spanish_vocab_size)

def simple_model(input_shape, output_sequence_length, english_vocab_size, french_vocab_size):
    """
    Build and train a basic RNN on x and y
    :param input_shape: Tuple of input shape
    :param output_sequence_length: Length of output sequence
    :param english_vocab_size: Number of unique English words in the dataset
    :param french_vocab_size: Number of unique French words in the dataset
    :return: Keras model built, but not trained
    """
    # Hyperparameters
    learning_rate = 0.005
    
    # TODO: Build the layers
    model = Sequential()
    model.add(GRU(256, input_shape=input_shape[1:], return_sequences=True))
    # model.add(TimeDistributed(Dense(1024, activation='relu')))
    model.add(Dropout(0.5))
    model.add(TimeDistributed(Dense(spanish_vocab_size, activation='softmax'))) 

    # Compile model
    model.compile(loss=sparse_categorical_crossentropy,
                  optimizer=Adam(learning_rate),
                  metrics=['accuracy'])
    return model


# Reshaping the input to work with a basic RNN
tmp_x = pad(preproc_english_sentences, max_spanish_sequence_length)
tmp_x = tmp_x.reshape((-1, preproc_spanish_sentences.shape[-2], 1))
tmp_x.shape

tmp_x=tmp_x[:50000]
tmp_X1=tmp_x[49999:]
tmp_x.shape,tmp_X1.shape

# Train the neural network
simple_rnn_model = simple_model(
    tmp_x.shape,
    max_spanish_sequence_length,
    english_vocab_size,
    spanish_vocab_size)

print(simple_rnn_model.summary())

history =simple_rnn_model.fit(tmp_x, preproc_spanish_sentences, batch_size=1024, epochs=10, validation_split=0.2)

# Print prediction(s)
# print(logits_to_text(simple_rnn_model.predict(tmp_x[:1])[0], french_tokenizer))

tmp_x[:1].shape

history.history

# plot the validation and training accuracy
fig, axis = plt.subplots(1, 2, figsize=(16,6))
axis[0].plot(history.history['loss'], label='Train_loss')
axis[0].set_title("Training Loss")
axis[0].set_xlabel("Epochs")
axis[1].plot(history.history['val_loss'], label='val_loss')
axis[1].set_title("Validation Loss")
axis[1].set_xlabel("Epochs")
plt.show()

# plot the validation and training accuracy
fig, axis = plt.subplots(1, 2, figsize=(16,6))
axis[0].plot(history.history['val_accuracy'], label='val_acc')
axis[0].set_title("Validation Accuracy")
axis[0].set_xlabel("Epochs")
axis[1].plot(history.history['accuracy'], label='acc')
axis[1].set_title("Training Accuracy")
axis[1].set_xlabel("Epochs")
plt.show()

def logits_to_text(logits, tokenizer):
    """
    Turn logits from a neural network into text using the tokenizer
    :param logits: Logits from a neural network
    :param tokenizer: Keras Tokenizer fit on the labels
    :return: String that represents the text of the logits
    """
    index_to_words = {id: word for word, id in tokenizer.word_index.items()}
    index_to_words[0] = ''

    return ' '.join([index_to_words[prediction] for prediction in np.argmax(logits, 1)])

# Print prediction(s)
print("Prediction:")
print(logits_to_text(simple_rnn_model.predict(tmp_X1)[0], french_tokenizer))

print("\nCorrect Translation:")
print(spanish_sentences[-1:])

print("\nOriginal text:")
print(english_sentences[-1:])