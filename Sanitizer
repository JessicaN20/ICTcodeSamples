package com.example.homeshare.sanitization;

import java.util.regex.Matcher;
import java.util.regex.Pattern;


public class Sanitizer implements ISanitizer {
    private static final String PASSWORD_REGEX = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\\S+$).{8,}$";
    private static final int MIN_PASSWORD_LENGTH = 6;
    private static final String EMAIL_REGEX = "[A-Za-z0-9]+@[A-Za-z]+\\.[a-z]{2,3}";
    private static final String NAME_REGEX = "(^[a-zA-Z]+$)";
    private static final String PHONE_NUMBER_REGEX = "(^(?:(?:\\(?(?:00|\\+)([1-4]\\d\\d|[1-9]\\d+)\\)?)[\\-\\.\\ \\\\\\/]?)?((?:\\(?\\d{1,}\\)?[\\-\\.\\ \\\\\\/]?){0,})(?:[\\-\\.\\ \\\\\\/]?(?:#|ext\\.?|extension|x)[\\-\\.\\ \\\\\\/]?(\\d+))?$)";
    private static final String DATE_REGEX = "^[1-9]{1,2}\\/[0-9]{1,2}\\/202[2-9]{1}$";
    public Sanitizer() {}

    public boolean isValidEmail(String email) {
        if (email == null) {
            return false;
        }

        Pattern pattern = Pattern.compile(EMAIL_REGEX);
        Matcher matcher = pattern.matcher(email);

        return matcher.matches();
    }

    public boolean isValidPassword(String password) {
        Pattern pattern = Pattern.compile(PASSWORD_REGEX);

        if (password == null || password.length() < MIN_PASSWORD_LENGTH) {
            return false;
        }

        Matcher matcher = pattern.matcher(password);

        return matcher.matches();
    }

    public boolean isValidName(String name) {
        if (name == null) {
            return false;
        }
        Pattern pattern = Pattern.compile(NAME_REGEX);
        Matcher matcher = pattern.matcher(name);
        return matcher.matches();
    }

    public boolean isValidDate(String date) {
        if (date == null) {
            return false;
        }
        Pattern pattern = Pattern.compile(DATE_REGEX);
        Matcher matcher = pattern.matcher(date);
        return matcher.matches();
    }


    public String sanitizeName(String name) {
        if (name == null) {
            return null;
        }

        Pattern pattern = Pattern.compile(NAME_REGEX);
        Matcher matcher = pattern.matcher(name);
        if (!matcher.matches() || matcher.groupCount() != 1) {
            return null;
        }

        return matcher.group();
    }

    public boolean isValidPhoneNumber(String phoneNumber) {
        if (phoneNumber == null) {
            return false;
        }

        Pattern pattern = Pattern.compile(PHONE_NUMBER_REGEX);
        Matcher matcher = pattern.matcher(phoneNumber);

        return matcher.matches();
    }
    // TODO: Probably have a separate function that takes in the formatting that we want for phone numbers for display!
    public String sanitizePhoneNumber(String phoneNumber) {
        if (phoneNumber == null) {
            return null;
        }

        Pattern pattern = Pattern.compile(PHONE_NUMBER_REGEX);
        Matcher matcher = pattern.matcher(phoneNumber);

        if (!matcher.matches()) {
            return null;
        }

        return matcher.group(1);
    }
}
